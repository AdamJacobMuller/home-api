{% import "github.com/AdamJacobMuller/home-api/api/models"
%}
{% code type Rows struct {
    Rows []Row
}
func (r *Rows) AddRow(row Row) {
    r.Rows = append(r.Rows, row)
}

type GenericRow struct {
    Boxes []Box
}
type GenericBox struct {
    Title string
}
type Action struct {
    Title string
}
type ChildDeviceBox struct {
    Title string
    Actions []*Action
}
type DimmableSwitchBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
}
type RedEyeBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
    Actions []*Action
}
func (b *RedEyeBox) AddAction(action *Action) {
    b.Actions = append(b.Actions, action)
}
type BinarySwitchBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
}
type DoorLockBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
}
type ColorChangeBulbBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
    PowerControlRoot bool
}
type SonosBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
}
type TivoBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
}
type DeviceBox struct {
    Title string
    ProviderID string
    DeviceID string
    Device *apimodels.Device
    Actions []*Action
    Children []*ChildDeviceBox
}
func (b *DeviceBox) AddChild(child *ChildDeviceBox) {
    b.Children = append(b.Children, child)
}
func (b *ChildDeviceBox) AddAction(action *Action) {
    b.Actions = append(b.Actions, action)
}
func (b *DeviceBox) AddAction(action *Action) {
    b.Actions = append(b.Actions, action)
}
func (r *GenericRow) AddBox(box Box) {
    r.Boxes = append(r.Boxes, box)
}
%}
{%
interface Row {
	HTML()
}
%}
{%
interface Box {
	HTML()
}
%}


{% func (p Rows) HTML() %}
    {% for _, r := range p.Rows %}
        {%= r.HTML()%}
    {% endfor %}
{% endfunc %}


{% func (p GenericRow) HTML() %}
<div class="row wrapper wrapper-content animated fadeInRight">
    {% for _, b := range p.Boxes %}
        <div class="col-lg-3 col-sm-6 col-md-6 grid-item">
            <div class="ibox float-e-margins">
                {%= b.HTML()%}
            </div>
        </div>
    {% endfor %}
</div>
{% endfunc %}
{% func (b GenericBox) HTML() %}
<div class="ibox-title">
    <h5>{%s b.Title%}</h5>
    <div class="ibox-tools">
        <a class="collapse-link">
            <i class="fa fa-chevron-up"></i>
        </a>
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">
            <i class="fa fa-wrench"></i>
        </a>
        <ul class="dropdown-menu dropdown-user">
            <li><a href="#">Config option 1</a>
            </li>
            <li><a href="#">Config option 2</a>
            </li>
        </ul>
        <a class="close-link">
            <i class="fa fa-times"></i>
        </a>
    </div>
</div>
<div class="ibox-content">
    <p>
        Use any of the available button classes to quickly create a styled button.
    </p>

    <h3 class="font-bold">
        Normal buttons
    </h3>
    <p>
        <button type="button" class="btn btn-w-m btn-default">Default</button>
        <button type="button" class="btn btn-w-m btn-primary">Primary</button>
        <button type="button" class="btn btn-w-m btn-success">Success</button>
        <button type="button" class="btn btn-w-m btn-info">Info</button>
        <button type="button" class="btn btn-w-m btn-warning">Warning</button>
        <button type="button" class="btn btn-w-m btn-danger">Danger</button>
        <button type="button" class="btn btn-w-m btn-link">Link</button>
    </p>
</div>
{% endfunc %}

{% func (b BinarySwitchBox) HTML() %}
<div class="ibox-title">
    <h5>{%s b.Title%}</h5>
    <div class="ibox-tools">
        <a class="collapse-link">
            <i class="fa fa-chevron-up"></i>
        </a>
    </div>
</div>
<div class="ibox-content">
<p>
    <button class="btn btn-primary btn-large-dim" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 255)%}><i class="fa fa-power-off"></i></button>
    <button class="btn btn-danger btn-large-dim" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 0)%}><i class="fa fa-power-off"></i></button>
</p>
</div>
{% endfunc %}
{% func (b DimmableSwitchBox) HTML() %}
<div class="ibox-title">
    <h5>{%s b.Title%}</h5>
    <div class="ibox-tools">
        <a class="collapse-link">
            <i class="fa fa-chevron-up"></i>
        </a>
    </div>
</div>
<div class="ibox-content">
    <p>
        <button class="btn btn-primary btn-large-dim" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 255) %}><i class="fa fa-power-off"></i></button>
        <button class="btn btn-danger btn-large-dim" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 0) %}><i class="fa fa-power-off"></i></button>
    </p>
    <p>
        <button class="btn btn-default" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 1) %}>1%</button>
        <button class="btn btn-default" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 10) %}>10%</button>
        <button class="btn btn-default" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 25) %}>25%</button>
        <button class="btn btn-default" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 50) %}>50%</button>
        <button class="btn btn-default" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 75) %}>75%</button>
        <button class="btn btn-default" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 100) %}>100%</button>
    </p>
</div>
{% endfunc %}
{% func OnClickSetDeviceValue(ProviderID string, DeviceID string, value int) %}
onclick="$.ajax({type: 'POST', url: '/api/SetDevicesValue', data: JSON.stringify({'match':{ProviderID: '{%s ProviderID %}', DeviceID: '{%s DeviceID%}'}, value: {%d value%}}), success: function(data){console.log(data);}, dataType: 'json'});"
{% endfunc %}
{% func OnClickInvokeDeviceAction(ProviderID string, DeviceID string, action string) %}
onclick="$.ajax({type: 'POST', url: '/api/InvokeDevicesAction', data: JSON.stringify({'match':{ProviderID: '{%s ProviderID %}', DeviceID: '{%s DeviceID%}'}, action: '{%s action%}'}), success: function(data){console.log(data);}, dataType: 'json'});"
{% endfunc %}
{% func OnClickSetChildDeviceValue(ProviderID string, DeviceID string, ChildName string, value int) %}
onclick="$.ajax({type: 'POST', url: '/api/SetChildDevicesValue', data: JSON.stringify({match:{ProviderID: '{%s ProviderID %}', DeviceID: '{%s DeviceID%}', Child: {Name: '{%s ChildName%}'}}, value: {%d value%}}), success: function(data){console.log(data);}, dataType: 'json'});"
{% endfunc %}
{% func OnClickInvokeChildDeviceAction(ProviderID string, DeviceID string, ChildName string, action string) %}
onclick="$.ajax({type: 'POST', url: '/api/InvokeChildDevicesAction', data: JSON.stringify({match:{ProviderID: '{%s ProviderID %}', DeviceID: '{%s DeviceID%}', Child: {Name: '{%s ChildName%}'}}, action: '{%s action %}'}), success: function(data){console.log(data);}, dataType: 'json'});"
{% endfunc %}
{% func (b ColorChangeBulbBox) HTML() %}
                    <div class="ibox-title">
                        <h5>{%s b.Title%}</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                    <p>
                    {% if b.PowerControlRoot %}
                        <button class="btn btn-primary btn-large-dim" type="button" {%= OnClickSetDeviceValue(b.ProviderID, b.DeviceID, 255)%}><i class="fa fa-power-off"></i></button>
                        <button class="btn btn-danger btn-large-dim" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Off")%}><i class="fa fa-power-off"></i></button>
                    {% else %}
                        <button class="btn btn-primary btn-large-dim" type="button" {%= OnClickSetChildDeviceValue(b.ProviderID, b.DeviceID, "Switch Multilevel", 255) %}><i class="fa fa-power-off"></i></button>
                        <button class="btn btn-danger btn-large-dim" type="button" {%= OnClickSetChildDeviceValue(b.ProviderID, b.DeviceID, "Switch Multilevel", 0) %}><i class="fa fa-power-off"></i></button>
                    {% endif %}
                    </p>
                    <p>
                        <button class="btn btn-danger" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Red") %}>R</button>
                        <button class="btn btn-primary" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Green") %}>G</button>
                        <button class="btn btn-success" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Blue") %}>B</button>
                        <button class="btn btn-default" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Cold White") %}>CW</button>
                        <button class="btn btn-default" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Warm White") %}>WW</button>
                    </p>
                    </div>
{% endfunc %}
{% func (b SonosBox) HTML() %}
                    <div class="ibox-title">
                        <h5>{%s b.Title%}</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                    <button class="btn btn-default btn-large-dim" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Play") %}><i class="fa fa-play"></i></button>
                    <button class="btn btn-default btn-large-dim" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Pause") %}><i class="fa fa-pause"></i></button>
                    <button class="btn btn-default btn-large-dim" type="button" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, "Next") %}><i class="fa fa-step-forward"></i></button>
                    </div>
{% endfunc %}
{% func (b TivoBox) HTML() %}
                    <div class="ibox-title">
                        <h5>{%s b.Title%}</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                    <button class="btn btn-default btn-large-dim" type="button"><i class="fa fa-apple"></i></button>
                    <button class="btn btn-default btn-large-dim" type="button"><i class="fa fa-github"></i></button>
                    <button class="btn btn-default btn-large-dim" type="button"><i class="fa fa-linux"></i></button>
                    <button class="btn btn-default btn-large-dim" type="button"><i class="fa fa-stack-overflow"></i></button>
                    </div>
{% endfunc %}

{% func (b DoorLockBox) HTML() %}
                    <div class="ibox-title">
                        <h5>{%s b.Title%}</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                    <button class="btn btn-primary btn-large-dim" type="button" {%= OnClickInvokeChildDeviceAction(b.ProviderID, b.DeviceID, "Lock", "Lock") %}><i class="fa fa-lock"></i></button>
                    <button class="btn btn-danger btn-large-dim" type="button" {%= OnClickInvokeChildDeviceAction(b.ProviderID, b.DeviceID, "Lock", "Unlock") %}><i class="fa fa-unlock"></i></button>
                    </div>
{% endfunc %}
{% func (b RedEyeBox) HTML() %}
                    <div class="ibox-title">
                        <h5>{%s b.Title%}</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                        <p>
                            {% for _, action := range b.Actions %}
                                <button type="button" class="btn btn-w-m btn-default" {%= OnClickInvokeDeviceAction(b.ProviderID, b.DeviceID, action.Title) %}>{%s action.Title %}</button>
                            {% endfor %}
                        </p>
                    </div>
{% endfunc %}
{% func (b DeviceBox) HTML() %}
                    <div class="ibox-title">
                        <h5>{%s b.Title%}</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                        <p>
                            {% for _, action := range b.Actions %}
                                <button type="button" class="btn btn-w-m btn-default">{%s action.Title %}</button>
                            {% endfor %}
                        </p>
                        {% for _, child := range b.Children %}
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <h5 class="panel-title">
                                        <a>{%s child.Title %}</a>
                                    </h5>
                                </div>
                                <div>
                                    <div class="panel-body">
                                        {% for _, action := range child.Actions %}
                                            <button type="button" class="btn btn-w-m btn-default">{%s action.Title %}</button>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
{% endfunc %}
